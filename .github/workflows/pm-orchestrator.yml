name: PM Orchestrator

on:
  workflow_dispatch:
    inputs:
      force_task:
        description: "Override task id (optional, e.g. T-0401)"
        required: false
        type: string
  pull_request:
    types: [closed]   # PR 合并后自动推进

permissions:
  contents: write
  issues: write
  pull-requests: write

concurrency:
  group: pm-orchestrator-${{ github.ref }}
  cancel-in-progress: false

jobs:
  plan:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - id: pick
        name: Pick next task
        shell: python
        env:
          FORCE_TASK: ${{ github.event.inputs.force_task }}
        run: |
          import os, json, yaml, pathlib, sys
          plan = yaml.safe_load(open(".pm/plan.yaml","r",encoding="utf-8"))
          sp   = pathlib.Path(".pm/state.json")
          state = json.loads(sp.read_text(encoding="utf-8")) if sp.exists() else {"completed":[],"current_task":""}

          # 如果是合并触发，尝试从标题里取已完成的 T-XXXX，写入 completed
          evt = json.loads(open(os.environ["GITHUB_EVENT_PATH"],"r").read())
          if evt.get("pull_request"):
              title = evt["pull_request"]["title"]
              import re
              m = re.search(r"(T-\d{4})", title or "")
              if m:
                  tid = m.group(1)
                  if tid not in state["completed"]:
                      state["completed"].append(tid)
                      state["current_task"] = ""

          # 计算下一任务
          done = set(state.get("completed", []))
          cur  = (state.get("current_task") or "").strip()
          def ready():
              for t in plan["tasks"]:
                  deps = set(t.get("depends_on", []))
                  if t["id"] not in done and deps.issubset(done):
                      yield t["id"]
          nxt = cur if cur and cur not in done else next(ready(), "")
          force = (os.environ.get("FORCE_TASK") or "").strip()
          task = force or nxt

          # 写 next_task.json，提交 state.json
          pathlib.Path(".pm").mkdir(parents=True, exist_ok=True)
          open(".pm/next_task.json","w",encoding="utf-8").write(json.dumps({"task":task}, ensure_ascii=False, indent=2))
          open(".pm/state.json","w",encoding="utf-8").write(json.dumps(state, ensure_ascii=False, indent=2))

          with open(os.environ["GITHUB_OUTPUT"],"a",encoding="utf-8") as f:
              f.write(f"task={task}\n")
          print(f"Picked task: {task}")

      - name: Commit next_task & state
        shell: bash
        run: |
          set -e
          git config user.name  "pm-bot"
          git config user.email "pm-bot@users.noreply.github.com"
          git add .pm/state.json .pm/next_task.json
          git diff --cached --quiet && { echo "No changes"; exit 0; }
          git commit -m "PM: update state & next task -> ${{ steps.pick.outputs.task }}"
          git pull --rebase origin ${{ github.ref_name }} || true
          git push
