name: PM Task Executor

on:
  workflow_dispatch:
    inputs:
      task_id:
        description: "Task ID"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  run-task:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: prep
        shell: pwsh
        run: |
          $env:TASK = "${{ github.event.inputs.task_id }}"
          $br = "codex/$env:TASK-" + (Get-Date -Format "yyyyMMdd-HHmmss")
          "TASK=$env:TASK" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "BR=$br"         | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          git fetch origin --prune
          git checkout -B $br origin/main

      - name: Run codex task
        shell: pwsh
        run: ./scripts/run-codex-task.ps1 "${{ steps.prep.outputs.TASK }}"

      - name: No-op guard
        shell: pwsh
        run: |
          git diff --quiet; if ($LASTEXITCODE -eq 0) { Write-Host "No changes"; exit 0 }

      - name: Commit & rebase & push
        shell: pwsh
        run: |
          # 配置提交身份（仅本仓库，不写到 global）
          git config user.email  "pm-bot@users.noreply.github.com"
          git config user.name   "pm-bot"

          # 提交
          git add -A

          # 若没有改动，直接退出本步骤（PowerShell 写法）
          git diff --cached --quiet
          if ($LASTEXITCODE -eq 0) {
            Write-Host "No staged changes"; exit 0
          }

          git commit -m "[${{ steps.prep.outputs.TASK }}] automated"

          # 基线同步 & 推送
          git fetch origin --prune
          git rebase origin/main
          git push -u origin "${{ steps.prep.outputs.BR }}" --force-with-lease

      - name: Open PR and enable auto-merge
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $title = "[${{ steps.prep.outputs.TASK }}] automated"
          $body  = (Get-Content .pm/templates/pr.md -Raw).Replace('{{TASK}}','${{ steps.prep.outputs.TASK }}')

          # 创建 PR（如果已存在就继续，不当成失败）
          gh pr create --title $title --body $body --base main --head "${{ steps.prep.outputs.BR }}"
          if ($LASTEXITCODE -ne 0) {
            Write-Host "gh pr create failed (maybe PR already exists). Continuing..."
          }

          # 尝试开启自动合并（未开启/检查未过也不当失败）
          gh pr merge --auto --squash
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Auto-merge not enabled or checks pending. Continuing..."
          }

  update-state:
    needs: run-task
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark done
        run: |
          python3 - <<'PY'
          import json, os, pathlib
          # 从事件里拿 task_id
          evt = json.load(open(os.environ['GITHUB_EVENT_PATH']))
          t = (evt.get('inputs') or {}).get('task_id','')
          p = pathlib.Path(".pm/state.json")
          s = json.loads(p.read_text(encoding="utf-8")) if p.exists() else {"completed":[]}
          if t and t not in s["completed"]:
              s["completed"].append(t)
          s["current_task"] = ""
          p.write_text(json.dumps(s, indent=2, ensure_ascii=False), encoding="utf-8")
          PY
          git config user.name  "pm-bot"
          git config user.email "pm-bot@users.noreply.github.com"
          git add .pm/state.json && git commit -m "PM: complete ${{ github.event.inputs.task_id }}" || exit 0
          git push
