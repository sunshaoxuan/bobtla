name: PM Task Executor
on:
  workflow_dispatch:
    inputs:
      task_id:
        required: true
        type: string
permissions:
  contents: write
  pull-requests: write
jobs:
  run-task:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Prepare
        id: prep
        shell: pwsh
        run: |
          $env:TASK="${{ github.event.inputs.task_id }}"
          echo "TASK=$env:TASK" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          git fetch origin --prune
          $br = "codex/$env:TASK-" + (Get-Date -Format "yyyyMMdd-HHmmss")
          git checkout -B $br origin/main
          echo "BR=$br" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      - name: Run codex task
        shell: pwsh
        run: ./scripts/run-codex-task.ps1 "${{ steps.prep.outputs.TASK }}"
      - name: No-op guard
        shell: pwsh
        run: |
          git diff --quiet; if ($LASTEXITCODE -eq 0) { Write-Host "No changes"; exit 0 }
      - name: Commit & rebase & push
        shell: pwsh
        run: |
          git add -A
          git commit -m "[${{ steps.prep.outputs.TASK }}] automated"
          git fetch origin --prune
          git rebase origin/main
          git push -u origin "${{ steps.prep.outputs.BR }}" --force-with-lease
      - name: Open PR and enable auto-merge
        env: { GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
        run: |
          gh pr create --title "[${{ steps.prep.outputs.TASK }}] automated" `
            --body "$(Get-Content .pm/templates/pr.md -Raw).Replace('{{TASK}}','${{ steps.prep.outputs.TASK }}')" `
            --base main --head "${{ steps.prep.outputs.BR }}" --label "codex,auto" || exit 0
          gh pr merge --auto --squash || exit 0
  update-state:
    needs: run-task
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Mark done
        run: |
          python3 - <<'PY'
          import json, os, pathlib
          t=os.getenv("TASK") or ""
          # 从 job 输出拿不到 TASK，这里从 event 里取
          import sys, json as J
          evt=J.load(open(os.getenv('GITHUB_EVENT_PATH')))
          t=evt['inputs']['task_id']
          p=pathlib.Path(".pm/state.json")
          s=J.loads(p.read_text()) if p.exists() else {"completed":[]}
          if t and t not in s["completed"]:
              s["completed"].append(t)
          s["current_task"]=""
          p.write_text(J.dumps(s,indent=2,ensure_ascii=False))
          PY
          git config user.name  "pm-bot"
          git config user.email "pm-bot@users.noreply.github.com"
          git add .pm/state.json && git commit -m "PM: complete ${{ github.event.inputs.task_id }}" || true
          git push
