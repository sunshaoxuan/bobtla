name: PM Guardian
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
permissions:
  contents: read
  pull-requests: write

jobs:
  guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Determine task & changed files
        id: info
        shell: bash
        run: |
          set -euo pipefail
          PR_TITLE="${{ github.event.pull_request.title }}"
          BR="${{ github.event.pull_request.head.ref }}"
          if [[ "$PR_TITLE" =~ (T-[0-9]{4}) ]]; then TID="${BASH_REMATCH[1]}";
          elif [[ "$BR" =~ (T-[0-9]{4}) ]]; then TID="${BASH_REMATCH[1]}";
          else echo "找不到 TaskID（标题或分支里需包含 T-XXXX）"; exit 1; fi
          echo "task=$TID" >> $GITHUB_OUTPUT

          git fetch origin ${{ github.event.pull_request.base.ref }} --depth=0
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          git diff --name-only "$BASE_SHA"...HEAD > .changed
          echo "changed<<EOF" >> $GITHUB_OUTPUT
          cat .changed >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate scope against plan.yaml
        shell: python
        env:
          TASK_ID: ${{ steps.info.outputs.task }}
          CHANGED: ${{ steps.info.outputs.changed }}
        run: |
          import os, yaml, fnmatch, sys, json, io
          plan = yaml.safe_load(open(".pm/plan.yaml","r",encoding="utf-8"))
          tid = os.environ["TASK_ID"]
          task = next((t for t in plan["tasks"] if t["id"]==tid), None)
          if not task: print(f"任务 {tid} 不在 plan.yaml"), sys.exit(1)
          allow = task.get("scope",{}).get("allow_paths",[])
          max_files = task.get("scope",{}).get("max_files_changed", 999999)
          max_lines = task.get("scope",{}).get("max_lines_changed", 999999)

          changed = os.environ["CHANGED"].splitlines()
          # 路径白名单
          for f in changed:
            if not any(fnmatch.fnmatch(f, g) for g in allow):
              print(f"越界: {f} 不在 allow_paths {allow}"); sys.exit(1)

          # 行数限制
          import subprocess
          out = subprocess.check_output(["git","diff","--numstat","${{ github.event.pull_request.base.sha }}","HEAD"]).decode()
          total = 0; files = 0
          for ln in out.splitlines():
            parts = ln.split("\t")
            if len(parts)>=3:
              add, dele, _ = parts
              if add.isdigit(): total += int(add)
              if dele.isdigit(): total += int(dele)
              files += 1
          if files > max_files: print(f"过多文件: {files}>{max_files}"); sys.exit(1)
          if total > max_lines: print(f"改动过大: {total}>{max_lines}"); sys.exit(1)

          print("Scope OK.")

      - name: Lint & Tests (dotnet + node)
        shell: bash
        run: |
          set -e
          if [ -f "src/TlaPlugin/TlaPlugin.csproj" ]; then
            dotnet restore
            dotnet build --configuration Release
            dotnet test --configuration Release --no-build
          fi
          if [ -f "package.json" ]; then
            npm ci
            npm test --silent
          fi

      - name: Enable auto-merge (squash)
        if: ${{ success() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # 开启自动合并，检查未过会稍后自动合
          gh pr merge --auto --squash "${{ github.event.pull_request.number }}" || true
